{"changed":false,"filter":false,"title":"jquery.tinycarousel.js","tooltip":"/js/jquery.tinycarousel.js","value":";(function(factory) {\n    if(typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    }\n    else if(typeof exports === 'object') {\n        module.exports = factory(require('jquery'));\n    }\n    else {\n        factory(jQuery);\n    }\n}\n(function($) {\n    var pluginName = \"tinycarousel\"\n    ,   defaults   =\n        {\n            start: 0\n        ,   axis: \"x\"\n        ,   buttons: true\n        ,   bullets: false\n        ,   interval: true\n        ,   intervalTime: 3000\n        ,   animation: true\n        ,   animationTime: 1000\n        ,   infinite: true\n        }\n    ;\n\n    function Plugin($container, options) {\n        /**\n         * The options of the carousel extend with the defaults.\n         *\n         * @property options\n         * @type Object\n         * @default defaults\n         */\n        this.options = $.extend({}, defaults, options);\n\n        /**\n         * @property _defaults\n         * @type Object\n         * @private\n         * @default defaults\n         */\n        this._defaults = defaults;\n\n        /**\n         * @property _name\n         * @type String\n         * @private\n         * @final\n         * @default 'tinycarousel'\n         */\n        this._name = pluginName;\n\n        var self = this\n        ,   $viewport = $container.find(\".viewport:first\")\n        ,   $overview = $container.find(\".overview:first\")\n        ,   $slides = null\n        ,   $next = $container.find(\".next:first\")\n        ,   $prev = $container.find(\".prev:first\")\n        ,   $bullets = $container.find(\".bullet\")\n\n        ,   viewportSize = 0\n        ,   contentStyle = {}\n        ,   slidesVisible = 0\n        ,   slideSize = 0\n        ,   slideIndex = 0\n\n        ,   isHorizontal = this.options.axis === 'x'\n        ,   sizeLabel = isHorizontal ? \"Width\" : \"Height\"\n        ,   posiLabel = isHorizontal ? \"left\" : \"top\"\n        ,   intervalTimer = null\n        ;\n\n        /**\n         * The index of the current slide.\n         *\n         * @property slideCurrent\n         * @type Number\n         * @default 0\n         */\n        this.slideCurrent = 0;\n\n        /**\n         * The number of slides the carousel is currently aware of.\n         *\n         * @property slidesTotal\n         * @type Number\n         * @default 0\n         */\n        this.slidesTotal = 0;\n\n        /**\n         * If the interval is running the value will be true.\n         *\n         * @property intervalActive\n         * @type Boolean\n         * @default false\n         */\n        this.intervalActive = false;\n\n        /**\n         * @method _initialize\n         * @private\n         */\n        function _initialize() {\n            self.update();\n            self.move(self.slideCurrent);\n\n            _setEvents();\n\n            return self;\n        }\n\n        /**\n         * You can use this method to add new slides on the fly. Or to let the carousel recalculate itself.\n         *\n         * @method update\n         * @chainable\n         */\n        this.update = function() {\n            $overview.find(\".mirrored\").remove();\n\n            $slides = $overview.children();\n            viewportSize = $viewport[0][\"offset\" + sizeLabel];\n            slideSize = $slides.first()[\"outer\" + sizeLabel](true);\n            self.slidesTotal = $slides.length;\n            self.slideCurrent = self.options.start || 0;\n            slidesVisible = Math.ceil(viewportSize / slideSize);\n\n            $overview.append($slides.slice(0, slidesVisible).clone().addClass(\"mirrored\"));\n            $overview.css(sizeLabel.toLowerCase(), slideSize * (self.slidesTotal + slidesVisible));\n\n            _setButtons();\n\n            return self;\n        };\n\n        /**\n         * @method _setEvents\n         * @private\n         */\n        function _setEvents() {\n            if(self.options.buttons) {\n                $prev.click(function() {\n                    self.move(--slideIndex);\n\n                    return false;\n                });\n\n                $next.click(function() {\n                    self.move(++slideIndex);\n\n                    return false;\n                });\n            }\n\n            $(window).resize(self.update);\n\n            if(self.options.bullets) {\n                $container.on(\"click\", \".bullet\", function() {\n                    self.move(slideIndex = +$(this).attr(\"data-slide\"));\n\n                    return false;\n                });\n            }\n        }\n\n\n        /**\n         * If the interval is stoped start it.\n         *\n         * @method start\n         * @chainable\n         */\n        this.start = function() {\n            if(self.options.interval) {\n                clearTimeout(intervalTimer);\n\n                self.intervalActive = true;\n\n                intervalTimer = setTimeout(function() {\n                    self.move(++slideIndex);\n\n                }, self.options.intervalTime);\n            }\n\n            return self;\n        };\n\n        /**\n         * If the interval is running stop it.\n         *\n         * @method start\n         * @chainable\n         */\n        this.stop = function() {\n            clearTimeout(intervalTimer);\n\n            self.intervalActive = false;\n\n            return self;\n        };\n\n        /**\n         * Move to a specific slide.\n         *\n         * @method move\n         * @chainable\n         * @param {Number}  [index] The slide to move to.\n         */\n        this.move = function(index) {\n            slideIndex = isNaN(index) ? self.slideCurrent : index;\n            self.slideCurrent = slideIndex % self.slidesTotal;\n\n            if(slideIndex < 0) {\n                self.slideCurrent = slideIndex = self.slidesTotal - 1;\n                $overview.css(posiLabel, -(self.slidesTotal) * slideSize);\n            }\n\n            if(slideIndex > self.slidesTotal) {\n                self.slideCurrent = slideIndex = 1;\n                $overview.css(posiLabel, 0);\n            }\n            contentStyle[posiLabel] = -slideIndex * slideSize;\n\n            $overview.animate(\n                contentStyle\n            ,   {\n                    queue : false\n                ,   duration : self.options.animation ? self.options.animationTime : 0\n                ,   always : function() {\n                       /**\n                        * The move event will trigger when the carousel slides to a new slide.\n                        *\n                        * @event move\n                        */\n                        $container.trigger(\"move\", [$slides[self.slideCurrent], self.slideCurrent]);\n                    }\n                });\n\n            _setButtons();\n            self.start();\n\n            return self;\n        };\n\n        /**\n         * @method _setButtons\n         * @private\n         */\n        function _setButtons() {\n            if(self.options.buttons && !self.options.infinite) {\n                $prev.toggleClass(\"disable\", self.slideCurrent <= 0);\n                $next.toggleClass(\"disable\", self.slideCurrent >= self.slidesTotal - slidesVisible);\n            }\n\n            if(self.options.bullets) {\n                $bullets.removeClass(\"active\");\n                $($bullets[self.slideCurrent]).addClass(\"active\");\n            }\n        }\n\n        return _initialize();\n    }\n\n    /**\n    * @class tinycarousel\n    * @constructor\n    * @param {Object} options\n        @param {Number}  [options.start=0] The slide to start with.\n        @param {String}  [options.axis=x] Vertical or horizontal scroller? ( x || y ).\n        @param {Boolean} [options.buttons=true] Show previous and next navigation buttons.\n        @param {Boolean} [options.bullets=false] Is there a page number navigation present?\n        @param {Boolean} [options.interval=false] Move to another block on intervals.\n        @param {Number}  [options.intervalTime=3000] Interval time in milliseconds.\n        @param {Boolean} [options.animate=true] False is instant, true is animate.\n        @param {Number}  [options.animationTime=1000] How fast must the animation move in ms?\n        @param {Boolean} [options.infinite=true] Infinite carousel.\n    */\n    $.fn[pluginName] = function(options) {\n        return this.each(function() {\n            if(!$.data(this, \"plugin_\" + pluginName)) {\n                $.data(this, \"plugin_\" + pluginName, new Plugin($(this), options));\n            }\n        });\n    };\n}));\n\n","undoManager":{"stack":[],"mark":-1,"position":-1},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":19,"column":26},"end":{"row":19,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1428569760000}